scalar DateTime

type User {
  email: ID!
  password: String!
  permission: String!
}

type Geolocation {
  xIndex: Float
  yIndex: Float
}

type Orner {
  id: ID!
  email: String!
  name: String!
  discription: String
  icon: String
  images: [String]!
  address: String
  location: Geolocation
}

type Visitor {
  visitorName: String!
  discription: String
  sumbnail: String
}

type Target {
  ageGroup: Int
  gender: Int
}

type Post {
  id: ID!
  name: String!
  start: DateTime!
  finish: DateTime!
  discription: String
  sumbnail: String
  images: [String]!
  visitors: [Visitor]!
  orner: Orner!
  address: String
  location: Geolocation
  target: Target!
}

type Query {
  user(email: ID!): User!
  users: [User]!
  orner(id: ID!): Orner!
  orners: [Orner]!
  post(id: ID!): Post!
  posts: [Post]!
}

type Mutation {
  addUser(email: ID!, password: String!): User!
  deleteUser(email: ID!): User!
}
